---
import { type ContactFormProps } from '../react/ContactForm.jsx';

interface Props extends ContactFormProps {
  ssr?: boolean
};
const props = Astro.props;

const providerProps = props.providerProps || {};


/**
 * Astro doesn't support React context (which is required by Mantine), so we're building using
 * WebPack first and then using a method from that to render React to HTML for SSR and hydrating.
 * It's a mess, but it works.
 */

import { getForm } from '../api';
// @ts-ignore
import { renderStatic } from '../dist/server/index.mjs';
let inputs;
let  form;
if (props.ssr) {
  inputs = await getForm(props.url, props.id);
  form = await renderStatic({
    url: props.url,
    id: props.id,
    providerProps: providerProps,
    inputs,
    handler: props.handler,
    afterSubmit: props.afterSubmit
  });
}

const handler = props.handler?.toString();
const afterSubmit = props.afterSubmit?.toString();

import '../dist/main/styles.css';
---

<snowmail-form data-url={props.url} data-id={props.id}
  data-provider-props={JSON.stringify(providerProps)} data-inputs={JSON.stringify(inputs)}
  set:html={form || ''} data-ssr={props.ssr ? 'true' : 'false'}
  data-handler={handler} data-after-submit={afterSubmit}></snowmail-form>

<script>
  import type { ContactFormProps } from '../react/ContactForm';

  function deserializeFunction(fn: string | undefined) {
    // Probably the weirdest workaround I've ever done in JS
    // https://stackoverflow.com/a/45676430
    return fn ? new Function('return ' + fn)() : undefined
  }

  class SnowMailForm extends HTMLElement {
    constructor() {
      super();

      interface FormProps extends ContactFormProps {
        element: Element
      }

      const commonProps: FormProps = {
        element: this,
        url: this.dataset.url as string,
        id: this.dataset.id as string,
        providerProps: JSON.parse(this.dataset.providerProps || '{}'),
        handler: deserializeFunction(this.dataset.handler),
        afterSubmit: deserializeFunction(this.dataset.afterSubmit)
      };

      // Dynamic imports are used here to ensure that the hoisted JS file isn't made unnecessarily large
      if (this.dataset.ssr === 'true') {
        import('../dist/main/index.mjs').then((m) => {
          m.hydrate({
            ...commonProps,
            inputs: this.dataset.inputs ? JSON.parse(this.dataset.inputs) : undefined
          });
        });
      } else {
        import('../dist/main/index.mjs').then((m) => {
          m.render(commonProps);
        });
      }
    }
  }

  customElements.define('snowmail-form', SnowMailForm);
</script>
